{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef38f335",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "secret is 5\n",
      "guess is 7\n",
      "too high\n"
     ]
    }
   ],
   "source": [
    "# choosing a number from 1 to 10 to assign variable secret\n",
    "secret = 5\n",
    "\n",
    "# selecting a number from 1 to 10 to assign variable guess\n",
    "guess = 7\n",
    "\n",
    "# printing values of variables\n",
    "print(\"secret is\",secret)\n",
    "print(\"guess is\",guess)\n",
    "\n",
    "# conditional if statement\n",
    "if guess < secret:\n",
    "    print('too low')\n",
    "elif guess > secret:\n",
    "    print('too high')\n",
    "else:\n",
    "    print('just right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4ca41f5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bdd5c74a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pea\n"
     ]
    }
   ],
   "source": [
    "#assigning variables to true and to false\n",
    "small = True\n",
    "green = False\n",
    "#if statements to print the true statement \n",
    "if small:\n",
    "    if green:\n",
    "        print(\"cherry\")\n",
    "    else:\n",
    "        print(\"pea\")\n",
    "else:\n",
    "    if green:\n",
    "        print(\"watermelon\")\n",
    "    else:\n",
    "        print(\"pumpkin\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b440f032",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "2\n",
      "1\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "#create list of numbers to print\n",
    "for value in [3,2,1,0]:\n",
    "    #print statement\n",
    "    print (value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b73718f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "too low\n",
      "too low\n",
      "too low\n",
      "too low\n",
      "too low\n",
      "too low\n",
      "found it\n"
     ]
    }
   ],
   "source": [
    "guess_me = 7\n",
    "number = 1\n",
    "while True:\n",
    "    if number < guess_me:\n",
    "        print('too low')\n",
    "    elif number == guess_me:\n",
    "        print('found it')\n",
    "        break\n",
    "    elif number > guess_me:\n",
    "        print('oops')\n",
    "        break\n",
    "    number +=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e65becf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create the guess numbner\n",
    "guess_me = 5\n",
    "#generate number\n",
    "for number in range(10):\n",
    "    if number < guess_me:\n",
    "        print('too low')\n",
    "    elif number == guess_me:\n",
    "        print('found it!')\n",
    "        break\n",
    "    elif number > guess_me:\n",
    "        print('oops')\n",
    "        break\n",
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
